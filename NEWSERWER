#include <boost\asio.hpp>
#include <thread>
#include <iostream>
#include <atomic>
#include <list>
#include <boost\thread.hpp>
//#include "\Develop\VisualStudio15Project\corteli\Parallel\Synchronization\Synchronization\Synchronization.h"
#include "..\..\..\..\corteli\Base\BaseContainers\BaseContainers\Buffer.h"



using namespace boost::asio;
using namespace boost::asio::ip;
using namespace std;

#define PAUSE cout<<"PRESS KEY"<<endl; getchar();

//using namespace corteli::parallel::synchronization;
using namespace corteli::base::container;


template<typename T>
class List
{
public:
	void push(const T& val)
	{
		boost::lock_guard<boost::mutex> l(m_);
		list_.push_back(val);
	}

	void remove(const T& val)
	{
		boost::lock_guard<boost::mutex> l(m_);
		for (list<T>::iterator i = list_.begin(); i != list_.end(); ++i)
		{
			if (val == *i)
			{
				list_.erase(i);
				break;
			}
		}
	}

	void browse(function<bool(T)> func)
	{
		boost::lock_guard<boost::mutex> l(m_);
		for (list<T>::iterator i = list_.begin(); i != list_.end(); ++i)
		{
			if (func(*i))
			{
				auto old = i;
				i++;
				list_.erase(old);
				if (i == list_.end())
				{
					break;
				}
			}
		}
	}

	void erase_(typename list<T>::iterator iter)
	{
		list_.erase(iter);
	}

private:
	list<T> list_;
	boost::mutex m_;
};

class Acceptor
	: public enable_shared_from_this<Acceptor>
{
public:
	Acceptor(io_service& io)
		: acceptor_(io)
		, client_(io)
	{
	}

	~Acceptor()
	{
		if (closeFunc_ != nullptr)
		{
			closeFunc_();
		}
	}

	void onAccept(function<void(tcp::socket)> func)
	{
		acceptFunc_ = func;
	}

	void onClose(function<void()> func)
	{
		closeFunc_ = func;
	}

	void listen(tcp::endpoint endpoint)
	{
		isWork_ = true;

		acceptor_.open(boost::asio::ip::tcp::v4());
		acceptor_.bind(endpoint);

		acceptor_.listen(1000);
		accept_();
	}

	void close()
	{
		isWork_ = false;
		acceptor_.close();
	}

private:
	void accept_()
	{
		if (isWork_)
		{
			auto self(shared_from_this());

			acceptor_.async_accept(client_,
				[this, self](boost::system::error_code ec)
			{
				if (!ec)
				{
					if (acceptFunc_ != nullptr)
					{
						acceptFunc_(move(client_));
					}
					accept_();
				}
				else
				{
					cout << ec.value() << ' ' << ec.message() << endl;
					close();
				}
			});
		}
	}


	tcp::acceptor acceptor_;
	tcp::socket client_;
	atomic<bool> isWork_ = false;
	function<void(tcp::socket)> acceptFunc_ = nullptr;
	function<void()> closeFunc_ = nullptr;
};


class Client
	: public enable_shared_from_this<Client>
{
public:
	Client(io_service& io)
		: socket_(io)
	{
	}

	Client(tcp::socket socket)
		: socket_(move(socket))
	{
		if (connectFunc_ != nullptr)
		{
			connectFunc_();
		}
	}

	~Client()
	{
		if (closeFunc_ != nullptr)
		{
			closeFunc_();
		}
	}

	time_t getlastMessageTime()
	{
		return lastRecvMessageTime_;
	}

	void connect(tcp::endpoint endpoint)
	{
		auto self(shared_from_this());
		socket_.async_connect(endpoint, 
			[this, self](boost::system::error_code ec)
		{
			if (!ec)
			{
				if (connectFunc_ != nullptr)
				{
					connectFunc_();
				}
			}
			else
			{
				cout << "connect error=" << ec.value() << ' ' << ec.message() << endl;
				close();
			}
		});
	}

	void startRecive()
	{
		recvBuff_.resize(1000);
		recive_();
	}

	int close()
	{
		boost::system::error_code err;
		socket_.close(err);
		return err.value();
	}

	void onRecive(function<void(corteli::base::container::Buffer<char>)> recvFunc)
	{
		recvFunc_ = recvFunc;
	}

	void onClose(function<void()> closeFunc)
	{
		closeFunc_ = closeFunc;
	}

	void onConnect(function<void()> connectFunc)
	{
		connectFunc_ = connectFunc;
	}

	void send(corteli::base::container::Buffer<char> message)
	{
		auto self(shared_from_this());

		socket_.async_send(buffer(message.getBuff(), message.getSize()), 
			[this, self](boost::system::error_code ec, std::size_t length)
		{
			if (ec)
			{
				cout << "send error=" << ec.value() << ' ' << ec.message() << endl;
				close();
			}
		});
	}

private:
	void recive_()
	{
		lastRecvMessageTime_ = clock();

		auto self(shared_from_this());
		socket_.async_receive(boost::asio::buffer(recvBuff_.getBuff(), recvBuff_.getSize()),
			[this, self](boost::system::error_code ec, std::size_t length)
		{
			if (!ec)
			{
				if (recvFunc_ != nullptr)
				{
					recvFunc_(recvBuff_);
				}
				recive_();
			}
			else
			{
				cout << "recive error=" << ec.value() << ' ' << ec.message() << endl;
				close();
			}
		});
	}

	tcp::socket socket_;
	std::atomic<time_t> lastRecvMessageTime_ = 0;
	Buffer<char> recvBuff_;

	function<void()> connectFunc_ = nullptr;
	function<void()> closeFunc_ = nullptr;
	function<void(corteli::base::container::Buffer<char>)> recvFunc_ = nullptr;
};



List<weak_ptr<Client>> clientList;


void acceptFunc(tcp::socket socket)
{
	cout << "new client" << endl;
	shared_ptr<Client> client = make_shared<Client>(move(socket));

	weak_ptr<Client> weak_client = client;
	clientList.push(client);


	client->onClose([]()
	{
		cout << "close" << endl;
	});

	client->onRecive([weak_client](Buffer<char> buff)
	{
		cout << "recv" << endl;
		weak_client.lock()->send({"HTTP/1.1 200 OK\nContent-Type: text/html\nContent-Length: 3\n\n123", 63});
		weak_client.lock()->close();
	});


	client->startRecive();
}




void main()
{
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);

	shared_ptr<io_service> io = make_shared<io_service>();

	shared_ptr<Acceptor> acceptor = make_shared<Acceptor>(*io);
	acceptor->onAccept(acceptFunc);
	acceptor->listen(tcp::endpoint(tcp::v4(), 80));


	thread workThread([io]()
	{
		io->run();
	});



	bool cleanerThreadWork = true;
	thread cleanerThread([&cleanerThreadWork]()
	{
		while (cleanerThreadWork)
		{
			clientList.browse([](weak_ptr<Client> iter)->bool
			{
				shared_ptr<Client> cl = iter.lock();
				if (cl.use_count()==0)
				{
					return true;
				}

				if (clock() - cl->getlastMessageTime() > 10000)
				{
					cl->close();
				}
				return false;
			});
			Sleep(100);
		}


		clientList.browse([](weak_ptr<Client> iter)->bool
		{
			shared_ptr<Client> cl = iter.lock();
			if (cl.use_count() == 0)
			{
				return true;
			}

			cl->close();
			return false;
		});

	});

	PAUSE
	acceptor->close();

	cleanerThreadWork = false;
	cleanerThread.join();

	workThread.join();

	cout << "ALL CLOSE"<< endl;
	PAUSE

	system("pause");
}
